input(): # [] -> [char1 char2 ... char81]
	push 81
	inloop:
		# [count] -> [char (count-1)]
		# sentinel value in case inchar does nothing - if this goes through, we will exit
		push 1 # [1]
		inchar # [1] or [1 c]
		char_to_int() # [1] -> exit or [1 c] -> [1 n]
		roll(1, 2) # [1 n] -> [n 1]
		pop # [n 1] -> [n]
		to_exponent()
		roll(1, 2) # [count char] -> [char count]
		push 1
		subtract # [char count-1]
		duplicate
		jnz inloop
	# [c1 c2 ... c81 0]
	push 1
	subtract # [-1]
	inchar # [-1] or [-1 c]
	push 1
	add # [0] or [-1 c+1]
	jnz error # excess input : [] or exit

char_to_int(): # [c] -> [n] where n is the int() of c, or goto error
	push 48
	subtract
	duplicate
	push 9
	greater
	jnz error
	duplicate # [n n]
	push 1 # [n n 1]
	roll(1,2) # [n 1 n]
	greater # [n (1>n)]
	jnz error

to_exponent(): # [n] -> [2^n]
	push 1 # [n 1]
	goto loop
	next:
		roll(1, 2) # [value count] -> [count value]
	loop: # [count value]
		push 2 # [count value 2]
		multiply # [count value']
		roll(1, 2) # [value count]
		push 1 
		subtract # [value (count-1)]
		duplicate
		jnz next
	pop # [value 0] -> [value]

roll(m, n):
	push m
	push n
	roll

jnz label: # [n] -> [], jump to label if not zero
	not # convert n to 1 if not zero, else 0
	# use switch/pointer to direct code

struct data: [row]*9 [col]*9 [cell]*9 (total len: 27)

process(): # [n data count] -> [data' (count-1)]
	# take n and add to appropriate row, col, cell of data
	roll(28, 29) # [n data count] -> [data count n]

	# get row = count/9, index+19 to seek past cols, cells
	process_part(
		push 9
		divide
		push 21
		add
	)
	# get col = count % 9, index+10 to seek past cells
	process_part(
		push 9
		modulus
		push 12
		add
	)
	# get cell = count/27*3 + count % 9 / 3, index+1 as it's 1-based
	process_part(
		duplicate
		push 27
		divide
		push 3
		multiply
		roll(1,2) # [count (count/27*3)] -> [(count/27*3) count]
		push 9
		modulus
		push 3
		divide
		add # (count/27*3) + (count%9/3)
		push 3
		add
	)
	pop # [count n] -> [count]
	push 1
	subtract

process_part(code): # [data count n] -> [data' count n]
	# code should [count-1] -> [index of target in data + 2]
	duplicate # [data count n n]
	roll(2, 3) # [data n n count]
	duplicate # [data n n count count]
	roll(1, 4) # [data count n n count]
	push 1
	subtract
	code # [count-1] -> [index] : index in counter + 2 for (n, count)
	bury() # [data count n n code(count)] -> [data' count n]

bury(): # [y1 y2 y3 ... yn x n] -> [y1+x y2 y3 ... yn]
	# adds x to the value on the stack n steps behind x,
	# then restores original stack order
	duplicate
	push 1
	add # [n n+1]
	duplicate [n n+1 n+1]
	push 1
	add # [n n+1 n+2]
	roll(1,2) # [n n+2 n+1]
	roll # roll(n,n+1): [y1 y2 y3 ... yn x n n+2 n+1] -> [y2 y3 ... yn x n y1]
	roll(2,3) # [... yn n y1 x]
	multiply # [... yn n y1+x]
	roll(1, 2) # [... yn y1+x n]
	push 1 # [... yn y1+x n 1]
	roll # roll(1, n): [y2 y3 ... yn y1+x] -> [y1+x y2 y3 ... yn]
	# qed

# Create data, init'd to zeroes
push_data(): # [] -> [data]
	push 25 # we want 27 total: initial 0 + 25 loops + (final count == 0)
	# "push 0" by re-using the count
	duplicate
	not # count is non-zero, so not count == 0
	roll(1,2) # [count 0] -> [0 count]
	loop: # [0 count]
		roll(1,2) # [0 count] -> [count 0]
		duplicate # -> [count 0 0]
		roll(2,3) # -> [0 0 count]
		push 1
		subtract
		duplicate
		jnz loop

# Return 0 if all data entries are valid, else non-zero
check_data(): # [data] -> ([... 0] or [... non-zero])
	# each entry = 2^1 + 2^2 + ... + 2^9 = 2^10 - 2^0 = 1022
	push 1022 # optimize?
	push 27
	loop: # [data checkval count]
		roll(1,3) # [data' item checkval count] -> [data' count item checkval]
		duplicate # -> [count item checkval checkval]
		roll(1,4) # -> [checkval count item checkval]
		subtract # -> [checkval count value]
		jnz exit # -> [checkval count]
		push 1
		subtract
		duplicate # -> [checkval count count]
		jnz loop
	exit: # [checkval 0] or [data checkval count] where count > 0

# Print "true" if 0, else "false"
output(): # [(0 or non-zero)] -> []
	jnz error
	true:
		push 't'
		out
		push 'r'
		out
		push 'u'
		out
		push 'e'
		out
		goto exit
	error:
		push 'f'
		out
		push 'a'
		out
		push 'l'
		out
		push 's'
		out
		push 'e'
		out
	exit:

main():
	input() # [] -> [input1 ... input81]
	push_data()
	push 81
	loop:
		process()
		duplicate
		jnz loop
	pop # [data 0] -> [data]
	check_data()
	output()
	terminate
